// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Module {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  published      Boolean   @default(false)
  publishedAt    DateTime?
  publishedWhere String?
  url            String?
  isbn           String?
  prefix         String?
  suffix         String?
  title          String
  description    String? // Could rename to abstract/summary
  license        License?  @relation(fields: [licenseId], references: [id])
  licenseId      Int?

  type         ModuleType @relation(fields: [moduleTypeId], references: [id])
  moduleTypeId Int

  main       Json? @default("{}")
  supporting Json? @default("{\"files\": []}")

  authors    Authorship[]
  authorsRaw Json?        @default("{}")

  parents  Module[] @relation("ModuleToModule", references: [id])
  children Module[] @relation("ModuleToModule", references: [id])

  references    Module[] @relation("ModuleReference", references: [id])
  referencedBy  Module[] @relation("ModuleReference", references: [id])
  referencesRaw Json?    @default("{}")

  @@unique([prefix, suffix])
}

model License {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String
  name      String
  price     Int      @default(0)
  price_id  String?
  Module    Module[]

  @@unique([url, name])
}

model ModuleType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  wikidata  String
  name      String
  Module    Module[]
}

model Authorship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId Int

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?

  acceptedInvitation Boolean?
  readyToPublish     Boolean  @default(false)

  authorshipRank Int?

  @@unique([moduleId, workspaceId])
}

model Workspace {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  handle    String   @unique
  avatar    String?
  name      String?
  bio       String?
  pronouns  String?  @db.VarChar(20)
  url       String?
  orcid     String?  @unique

  members     Membership[]
  authorships Authorship[]
  following   Workspace[]  @relation("WorkspaceToWorkspace")
  followers   Workspace[]  @relation("WorkspaceToWorkspace")
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  invitedName  String?
  invitedEmail String?

  @@unique([workspaceId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  name            String?
  email           String     @unique
  emailIsVerified Boolean    @default(false)
  hashedPassword  String?
  role            GlobalRole

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model ReleaseList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String
}
