// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Module {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  displayColor   String    @default("#574cfa")
  published      Boolean   @default(false)
  publishedAt    DateTime?
  publishedWhere String?
  originMetadata String    @default("ResearchEquals")
  url            String?
  isbn           String?
  prefix         String?
  suffix         String?
  title          String
  description    String?
  language       String    @default("en")
  license        License?  @relation(fields: [licenseId], references: [id])
  licenseId      Int?

  type         ModuleType @relation(fields: [moduleTypeId], references: [id])
  moduleTypeId Int

  main       Json? @default("{}")
  supporting Json? @default("{\"files\": []}")

  authors    Authorship[]
  authorsRaw Json?        @default("{}")

  parents  Module[] @relation("ModuleToModule")
  children Module[] @relation("ModuleToModule")

  references    Module[]     @relation("ModuleReference")
  referencedBy  Module[]     @relation("ModuleReference")
  referencesRaw Json?        @default("{}")
  Submission    Submission[]

  @@unique([prefix, suffix])
}

model License {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  source    String   @default("ResearchEquals")
  url       String   @unique
  name      String?
  price     Int      @default(0)
  price_id  String?
  Module    Module[]
}

model ModuleType {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  originType String   @default("ResearchEquals")
  wikidata   String?
  name       String   @unique
  schema     String   @default("CreativeWork")
  Module     Module[]
}

model Authorship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module   Module @relation(fields: [moduleId], references: [id])
  moduleId Int

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId Int?

  acceptedInvitation Boolean?
  readyToPublish     Boolean  @default(false)

  authorshipRank Int?

  @@unique([moduleId, workspaceId])
}

model Workspace {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  workspaceType WorkspaceType @default(Individual)
  handle        String        @unique
  avatar        String?
  firstName     String?
  lastName      String?
  name          String?
  bio           String?
  pronouns      String?       @db.VarChar(20)
  url           String?
  orcid         String?

  members     Membership[]
  authorships Authorship[]
  following   Workspace[]  @relation("WorkspaceToWorkspace")
  followers   Workspace[]  @relation("WorkspaceToWorkspace")
  Submission  Submission[]
  Editorship  Editorship[]

  followingCollections Collection[] @relation("WorkspaceToCollection")
}

enum WorkspaceType {
  Individual
  Group
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  invitedName  String?
  invitedEmail String?

  emailInvitations  Boolean @default(true)
  emailApprovals    Boolean @default(true)
  emailWeeklyDigest Boolean @default(true)

  @@unique([workspaceId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  name             String?
  email            String     @unique
  emailIsVerified  Boolean    @default(false)
  hashedPassword   String?
  role             GlobalRole
  emailConsent     Boolean?
  marketingConsent Boolean?

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model ReleaseList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String
}

model Submission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accepted  Boolean?

  // The actual submission
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  module       Module     @relation(fields: [moduleId], references: [id])
  moduleId     Int
  comment      String     @db.VarChar(280)

  // The people involved
  editor       Editorship @relation(fields: [editorshipId], references: [id])
  editorshipId Int
  submittedBy  Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId  Int

  // pinned information
  pinPosition Int?

  @@unique([collectionId, pinPosition])
}

model Collection {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  finishedAt DateTime?

  type             CollectionType @relation(fields: [collectionTypeId], references: [id])
  collectionTypeId Int

  suffix      String?
  icon        Json?
  header      Json?
  title       String
  subtitle    String?
  description String?
  language    String  @default("en")

  editors     Editorship[]
  submissions Submission[]

  followers Workspace[] @relation("WorkspaceToCollection")
}

model CollectionType {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  type       CollectionTypes @unique
  Collection Collection[]
  price      Int?
  price_id   String?
}

enum CollectionTypes {
  INDIVIDUAL
  COLLABORATIVE
  COMMUNITY
}

model Editorship {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  role      MembershipRole @default(USER)

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int

  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  Submission  Submission[]
}
